<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <title>Scatter Symbols</title>
        <script src= "https://d3js.org/d3.v7.min.js"></script>
        <style type="text/css">
            
            
            .axis path, 
            .axis line{
                stroke: rgb(180, 4, 215);
            }
            
            .axis text{
                font-family: sans-serif;
                font-size: 10px;
                font-weight: bold;
                fill: rgb(180, 4, 215);
            }
            
            .stars {
                fill: gold;
                stroke: midnightblue;
                stroke-width: 1px;
            }
        
        
            .stars:hover{
                fill: rgb(178, 6, 146);
                stroke: gold;
                stroke-width: 1px;
            }

       
          .tooltip{
            position: absolute;
            width: 50px;
            height: 24px;
            padding: 2px;    
            text-align: center; 
            font-family:sans-serif;
            font-size: 12px;
            font-weight: bold;
            background: rgb(87, 220, 20); 
            border-radius: 8px;
          }

        </style>
    </head>
    <body>
        <script type="text/javascript">
            
            
            const w = 500;
            const h = 500;
            const margin = 50;

            //Data 
            //*data taken from Back Firing: The Impacts of Drug Prohibition on the Criminal Justice System Budgets in Rio de Janeiro and São Paulo - Centro de Estudos de Segurança e Cidadania
            //https://cdn.sanity.io/files/6u5teakk/production/333041e21b5517d52c75489023354c6d68bd0037.pdf?dl=
             
            d3.csv("Expend.csv").then(data => {
            console.log("data", data)
        
                
                data.forEach(d => { 
                d.item = d.item;
                d.x = +d.x;
                d.y = +d.y;  
                });
            
            
            const xScale = d3.scaleLinear()
                             .domain([0, d3.max(data, d => d.x)]) 
                             .range([margin, w-margin]); 

            const yScale = d3.scaleLinear()
                             .domain([0, d3.max(data, d => d.y)]) 
                             .range([h-margin, margin]); 
            
            const tooltip =d3.select("body")
                         .append("div")
                         .attr("class", "tooltip")
                         .style("opacity", 0);
            
        
            const mouseover = function(event, d) {
                    tooltip
                    .html("Item: " + "<br>" + d.item)
                    .style("opacity", 1) 
                    .style("left", (event.pageX + 3) + "px")
                    .style("top", (event.pageY + 3) + "px");
                    }     

            const mousemove = function(event, d) {
                    tooltip
                    .style("left", (event.pageX + 3) + "px")
                    .style("top", (event.pageY + 3) + "px")
                    }
            
            const mouseout = function(event, d) {
                    tooltip
                    .style("opacity", 0);
                    }

            //SVG
            const svg = d3.select("body")
                    .append("svg")
                    .attr("width", w)
                    .attr("height", h);

                    svg.append("text")
                    .attr("x", w / 2)
                    .attr("y", 30)
                    .attr("text-anchor", "middle")
                    .attr("font-size", "24px")
                    .text("Rio de Janeiro Drug Act Expenditures, 2020");


            //axes 
            const bottomAxis = d3.axisBottom()
                                .scale(xScale)
                                .ticks(10);
            
            //implement 
            svg.append("g")
                .attr("class", "axis") 
                .attr("transform", "translate(0," + (h-margin) + ")") 
                .call(bottomAxis);

            const leftAxis = d3.axisLeft()
                             .scale(yScale)
                             .ticks(10);
            
            //implement 
            svg.append("g")
               .attr("class", "axis") 
               .attr("transform", "translate(" + margin + ",0)")
               .call(leftAxis);

            //symbol generator 
            const symbolData = d3.symbol()
                             .type(d3.symbolStar);
                                        
            //scatter with tooltip events attributed
            const stars = svg.selectAll("stars")
                    .data(data)
                    .enter()
                    .append("path")
                    .attr("class", "stars")
                    .attr("d", symbolData)
                    .attr("transform", d => "translate(" + xScale(d.x) + "," + yScale(d.y) + ")")
                    .on("mouseover", mouseover) 
                    .on("mousemove", mousemove)
                    .on("mouseout", mouseout);

            });
        </script>
    </body>
</html>